<?php
/**
 * @file
 * Contains the Search API hook implementations.
 */

/*
 * Include required classes and interfaces.
 */
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Config\Entity\ConfigEntityInterface;

/*
 * Constant definitions.
 */

/**
 * Default number of items indexed per cron batch for each enabled index.
 */
define('SEARCH_API_DEFAULT_CRON_LIMIT', 50);

/*
 * Hook implementations.
 */

/**
 * Implements hook_menu().
 */
function search_api_menu() {
  return array(
    'admin/config/search/search_api' => array(
      'title' => 'Search API',
      'description' => 'Create and configure search engines.',
      'route_name' => 'search_api.overview',
    ),
    'admin/config/search/search_api/servers' => array(
      'title' => 'Servers',
      'route_name' => 'search_api.server_overview',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    ),
    'admin/config/search/search_api/servers/add_server' => array(
      'title' => 'Add server',
    'description' => 'Create a new search server.',
      'route_name' => 'search_api.server_add',
      'type' => MENU_LOCAL_ACTION,
    ),
    'admin/config/search/search_api/servers/%' => array(
      'title callback' => 'entity_page_label',
      'title arguments' => array(5),
      'route_name' => 'search_api.server_edit',
    ),
    'admin/config/search/search_api/servers/%/edit' => array(
      'title' => 'Edit',
      'route_name' => 'search_api.server_edit_default',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    ),
    'admin/config/search/search_api/servers/%/delete' => array(
      'title' => 'Delete',
      'route_name' => 'search_api.server_delete',
      'type' => MENU_CALLBACK,
    ),
    'admin/config/search/search_api/servers/%/enable' => array(
      'title' => 'Enable',
      'route_name' => 'search_api.server_enable',
      'type' => MENU_CALLBACK,
    ),
    'admin/config/search/search_api/servers/%/disable' => array(
      'title' => 'Disable',
      'route_name' => 'search_api.server_disable',
      'type' => MENU_CALLBACK,
    ),
    'admin/config/search/search_api/indexes' => array(
      'title' => 'Indexes',
      'route_name' => 'search_api.index_overview',
      'type' => MENU_LOCAL_TASK,
    ),
    'admin/config/search/search_api/indexes/add_index' => array(
      'title' => 'Add index',
    'description' => 'Create a new search index.',
      'route_name' => 'search_api.index_add',
      'type' => MENU_LOCAL_ACTION,
    ),
    'admin/config/search/search_api/indexes/%' => array(
      'title callback' => 'entity_page_label',
      'title arguments' => array(5),
      'route_name' => 'search_api.index_edit',
    ),
    'admin/config/search/search_api/indexes/%/edit' => array(
      'title' => 'Edit',
      'route_name' => 'search_api.index_edit_default',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    ),
    'admin/config/search/search_api/indexes/%/fields' => array(
      'title' => 'Fields',
      'route_name' => 'search_api.index_fields',
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    ),
    'admin/config/search/search_api/indexes/%/workflow' => array(
      'title' => 'Workflow',
      'route_name' => 'search_api.index_workflow',
      'type' => MENU_LOCAL_TASK,
      'weight' => 20,
    ),
    'admin/config/search/search_api/indexes/%/delete' => array(
      'title' => 'Delete',
      'route_name' => 'search_api.index_delete',
      'type' => MENU_CALLBACK,
    ),
    'admin/config/search/search_api/indexes/%/enable' => array(
      'title' => 'Enable',
      'route_name' => 'search_api.index_enable',
      'type' => MENU_CALLBACK,
    ),
    'admin/config/search/search_api/indexes/%/disable' => array(
      'title' => 'Disable',
      'route_name' => 'search_api.index_disable',
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function search_api_permission() {
  return array(
    'administer search_api' => array(
      'title' => t('Administer Search API'),
      'description' => t('Create and configure Search API servers and indexes.'),
    ),
  );
}

/**
 * Implements hook_queue_info().
 */
function search_api_queue_info() {
  return array(
    'search_api_indexing_queue' => array(
      'title' => t('Search index queue'),
      'worker callback' => array('\Drupal\search_api\Queue\IndexQueueWorker', 'process'),
      'cron' => array('time' => Drupal::config('search_api')->get('cron_worker_runtime')),
    ),
  );
}

/**
 * Implements hook_system_info_alter().
 *
 * @todo: See https://drupal.org/node/1199946 if dynamic module requirement will
 * be supported through another API.
 */
function search_api_system_info_alter(array &$info, $file, $type) {
  // Check if the info describes a module and Drupal is not in maintenance
  // mode.
  if ($type == 'module' && !defined('MAINTENANCE_MODE')) {
    // Get the entity manager.
    $entity_manager = Drupal::service('entity.manager');
    // Get all the defined servers.
    $servers = $entity_manager->getStorageController('search_api_server')->loadMultiple();
    // Iterate through the servers.
    foreach ($servers as $server) {
      // Check if the server contains a valid service.
      if ($server->hasValidService()) {
        // Get the service plugin definition.
        $plugin_definition = $server->getService()->getPluginDefinition();
        // Check if the current module provides the plugin.
        if ($file->name == $plugin_definition['provider']) {
          // Mark the module as required.
          $info['required'] = TRUE;
          // Provide a human friendly message as to why the module is required.
          $info['explanation'] = t('Required by the Search API module');
        }
      }
    }
    // Get all the defined indexes.
    $indexes = $entity_manager->getStorageController('search_api_index')->loadMultiple();
    // Iterate through the indexes.
    foreach ($indexes as $index) {
      // Check if the index contains a valid datasource.
      if ($index->hasValidDatasource()) {
        // Get the datasource plugin definition.
        $plugin_definition = $index->getDatasource()->getPluginDefinition();
        // Check if the current module provides the plugin.
        if ($file->name == $plugin_definition['provider']) {
          // Mark the module as required.
          $info['required'] = TRUE;
          // Provide a human friendly message as to why the module is required.
          $info['explanation'] = t('Required by the Search API module');
        }
      }
    }
    // Check if the current module is the Search API module and at least one
    // server or index is defined.
    if ($file->name == 'search_api' && ($servers || $indexes)) {
      // Mark the module as required.
      $info['required'] = TRUE;
      // Provide a human friendly message as to why the module is required.
      $info['explanation'] = t('Required by the Search API module');
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function search_api_entity_insert(EntityInterface $entity) {
  // Check if the entity is a content entity.
  if (!($entity instanceof ConfigEntityInterface)) {
    // @todo: Track entity insert.
  }
}

/**
 * Implements hook_entity_update().
 */
function search_api_entity_update(EntityInterface $entity) {
  // Check if the entity is a content entity.
  if (!($entity instanceof ConfigEntityInterface)) {
    // @todo: Track entity change.
  }
}

/**
 * Implements hook_entity_delete().
 */
function search_api_entity_delete(EntityInterface $entity) {
  // Check if the entity is a content entity.
  if (!($entity instanceof ConfigEntityInterface)) {
    // @todo: Track entity delete.
  }
}
