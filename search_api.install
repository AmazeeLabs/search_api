<?php
// $Id$

/**
 * Implements hook_schema().
 */
function search_api_schema() {
  $schema['search_api_server'] = array(
    'description' => 'Stores all search backend servers created through the ' .
        'Search API.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a server.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The displayed name for a server.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'The displayed description for a server.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'backend' => array(
        'description' => 'The id of the backend to use for this server.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'options' => array(
        'description' => 'The options used to configure the backend.',
        'type' => 'text',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'description' => 'A flag indicating whether the server is enabled.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'enabled' => array('enabled'),
    ),
    'primary key' => array('id'),
  );

  $schema['search_api_index'] = array(
    'description' => 'Stores all search indexes on a {search_api_server}.',
    'fields' => array(
      'id' => array(
        'description' => 'An integer identifying the index.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'A name to be displayed for the index.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => "A string describing the index' use to users.",
        'type' => 'text',
        'not null' => FALSE,
      ),
      'server' => array(
        'description' => 'The {search_api_server}.id on which data should be ' .
            'indexed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The entity type of items stored in this index.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'cron_limit' => array(
        'description' => 'Maximum number of items to be indexed in one cron run for this index.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 50,
      ),
      'options' => array(
        'description' => 'An array of additional arguments to be passed to schema functions for ' .
            'this index.',
        'type' => 'text',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'description' => 'A flag indicating whether this index is enabled.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'enabled' => array('enabled'),
      'server' => array('server'),
    ),
    'primary key' => array('id'),
  );

  $schema['search_api_item'] = array(
    'description' => 'Stores the items which should be indexed for each ' .
        'index, and their status.',
    'fields' => array(
      'id' => array(
        'description' => "The item's entity id (e.g. {node}.nid for nodes).",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'index_id' => array(
        'description' => 'The {search_api_index}.id this item belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'changed' => array(
        'description' => 'A flag indicating whether this item needs to be ' .
            '(re-)indexed (1) or not (0).',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'index_id' => array('index_id'),
    ),
    'primary key' => array('id', 'index_id'),
  );

  return $schema;
}
