<?php
// $Id$

/**
 * @file
 * Install, update and uninstall functions for the Search API module.
 */

/**
 * Implements hook_schema().
 */
function search_api_schema() {
  $schema['search_api_backend'] = array(
    'description' => 'Stores all search backends created through the Search ' .
        'API.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a backend.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The displayed name for a backend.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'The displayed description for a backend.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'class' => array(
        'description' => 'The id of the backend class to use for this backend.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'options' => array(
        'description' => 'The options used to configure the backend.',
        'type' => 'text',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'description' => 'A flag indicating whether the backend is enabled.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'enabled' => array('enabled'),
    ),
    'primary key' => array('id'),
  );

  $schema['search_api_index'] = array(
    'description' => 'Stores all search indexes on a {search_api_server}.',
    'fields' => array(
      'id' => array(
        'description' => 'An integer identifying the index.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'A name to be displayed for the index.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => "A string describing the index' use to users.",
        'type' => 'text',
        'not null' => FALSE,
      ),
      'backend' => array(
        'description' => 'The {search_api_backend}.id with which data should ' .
            'be indexed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The entity type of items stored in this index.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'options' => array(
        'description' => 'An array of additional arguments configuring this ' .
            'index.',
        'type' => 'text',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'description' => 'A flag indicating whether this index is enabled.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'backend' => array('backend'),
      'enabled' => array('enabled'),
    ),
    'primary key' => array('id'),
  );

  $schema['search_api_item'] = array(
    'description' => 'Stores the items which should be indexed for each ' .
        'index, and their status.',
    'fields' => array(
      'item_id' => array(
        'description' => "The item's entity id (e.g. {node}.nid for nodes).",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'index_id' => array(
        'description' => 'The {search_api_index}.id this item belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'changed' => array(
        'description' => 'Either a flag or a timestamp to indicate if or ' .
            'when the item was changed since it was last indexed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'indexing' => array('index_id', 'changed'),
    ),
    'primary key' => array('item_id', 'index_id'),
  );

  return $schema;
}
