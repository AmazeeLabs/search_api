<?php
// $Id$

/**
 * @file
 * Install, update and uninstall functions for the Search API module.
 */

/**
 * Implements hook_schema().
 */
function search_api_schema() {
  $schema['search_api_server'] = array(
    'description' => 'Stores all search servers created through the Search API.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a server.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The displayed name for a server.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'The machine name for a server.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'The displayed description for a server.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'class' => array(
        'description' => 'The id of the service class to use for this server.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'options' => array(
        'description' => 'The options used to configure the service object.',
        'type' => 'text',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'description' => 'A flag indicating whether the server is enabled.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'enabled' => array('enabled'),
    ),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
    'primary key' => array('id'),
  );

  $schema['search_api_index'] = array(
    'description' => 'Stores all search indexes on a {search_api_server}.',
    'fields' => array(
      'id' => array(
        'description' => 'An integer identifying the index.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'A name to be displayed for the index.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'The machine name of the index.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => "A string describing the index' use to users.",
        'type' => 'text',
        'not null' => FALSE,
      ),
      'server' => array(
        'description' => 'The {search_api_server}.id with which data should be indexed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'entity_type' => array(
        'description' => 'The entity type of items stored in this index.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'options' => array(
        'description' => 'An array of additional arguments configuring this index.',
        'type' => 'text',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'description' => 'A flag indicating whether this index is enabled.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'server' => array('server'),
      'enabled' => array('enabled'),
    ),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
    'primary key' => array('id'),
  );

  $schema['search_api_item'] = array(
    'description' => 'Stores the items which should be indexed for each index, and their status.',
    'fields' => array(
      'item_id' => array(
        'description' => "The item's entity id (e.g. {node}.nid for nodes).",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'index_id' => array(
        'description' => 'The {search_api_index}.id this item belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'changed' => array(
        'description' => 'Either a flag or a timestamp to indicate if or when the item was changed since it was last indexed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'indexing' => array('index_id', 'changed'),
    ),
    'primary key' => array('item_id', 'index_id'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 *
 * Creates a default node index.
 */
function search_api_install() {
  $name = t('Default node index');
  $values = array(
    'name' => $name,
    'machine_name' => preg_replace('/\W+/', '_', $name),
    'description' => t('An automatically created search index for indexing node data. Might be configured to specific needs.'),
    'server' => NULL,
    'entity_type' => 'node',
    'options' => array(
      array(
        'cron_limit' => '50',
        'data_alter_callbacks' => array(
          'search_api_alter_add_fulltext' => array(
            'status' => 1,
            'weight' => '0',
          ),
          'search_api_alter_add_url' => array(
            'status' => 0,
            'weight' => '0',
          ),
        ),
        'processors' => array(
          'search_api_case_ignore' => array(
            'status' => 1,
            'weight' => '0',
            'settings' => array(
              'strings' => 0,
            ),
          ),
          'search_api_html_filter' => array(
            'status' => 1,
            'weight' => '10',
            'settings' => array(
              'title' => 0,
              'alt' => 1,
              'tags' => 'h1 = 5
              h2 = 3
              h3 = 2
              strong = 2
              b = 2
              em = 1.5
              u = 1.5',
            ),
          ),
          'search_api_tokenizer' => array(
            'status' => 1,
            'weight' => '20',
            'settings' => array(
              'spaces' => '[^\\p{L}\\p{N}]',
              'ignorable' => '[-]',
            ),
          ),
        ),
        'fields' => array(
          'nid' => array(
            'name' => 'Node ID',
            'type' => 'integer',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'vid' => array(
            'name' => 'Revision ID',
            'type' => 'integer',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'tnid' => array(
            'name' => 'Translation set ID',
            'type' => 'integer',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'uid' => array(
            'name' => 'User ID',
            'type' => 'integer',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'is_new' => array(
            'name' => 'Is new',
            'type' => 'boolean',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'type' => array(
            'name' => 'Content type',
            'type' => 'string',
            'boost' => '1.0',
            'indexed' => 1,
          ),
          'type_name' => array(
            'name' => 'Content type name',
            'type' => 'string',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'title' => array(
            'name' => 'Title',
            'type' => 'text',
            'boost' => '5.0',
            'indexed' => 1,
          ),
          'language' => array(
            'name' => 'Language',
            'type' => 'string',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'url' => array(
            'name' => 'URL',
            'type' => 'uri',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'edit_url' => array(
            'name' => 'Edit URL',
            'type' => 'uri',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'status' => array(
            'name' => 'Published',
            'type' => 'boolean',
            'boost' => '1.0',
            'indexed' => 1,
          ),
          'promote' => array(
            'name' => 'Promoted to frontpage',
            'type' => 'boolean',
            'boost' => '1.0',
            'indexed' => 1,
          ),
          'sticky' => array(
            'name' => 'Sticky in lists',
            'type' => 'boolean',
            'boost' => '1.0',
            'indexed' => 1,
          ),
          'created' => array(
            'name' => 'Date created',
            'type' => 'date',
            'boost' => '1.0',
            'indexed' => 1,
          ),
          'changed' => array(
            'name' => 'Date changed',
            'type' => 'date',
            'boost' => '1.0',
            'indexed' => 1,
          ),
          'log' => array(
            'name' => 'Revision log message',
            'type' => 'text',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'revision' => array(
            'name' => 'Creates revision',
            'type' => 'boolean',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'comment' => array(
            'name' => 'Comments allowed',
            'type' => 'integer',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'comment_count' => array(
            'name' => 'Comment count',
            'type' => 'integer',
            'boost' => '1.0',
            'indexed' => 1,
          ),
          'comment_count_new' => array(
            'name' => 'New comment count',
            'type' => 'integer',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'search_api_language' => array(
            'name' => 'Item language',
            'type' => 'string',
            'boost' => '1.0',
            'indexed' => 1,
          ),
          'search_api_fulltext' => array(
            'name' => 'Fulltext',
            'type' => 'text',
            'boost' => '1.0',
            'indexed' => 1,
          ),
          'author:uid' => array(
            'name' => 'Author » User ID',
            'type' => 'integer',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'author:name' => array(
            'name' => 'Author » Name',
            'type' => 'string',
            'boost' => '1.0',
            'indexed' => 1,
          ),
          'author:mail' => array(
            'name' => 'Author » Email',
            'type' => 'string',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'author:url' => array(
            'name' => 'Author » URL',
            'type' => 'uri',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'author:edit_url' => array(
            'name' => 'Author » Edit URL',
            'type' => 'uri',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'author:login' => array(
            'name' => 'Author » Last login',
            'type' => 'date',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'author:created' => array(
            'name' => 'Author » Created',
            'type' => 'date',
            'boost' => '1.0',
            'indexed' => 0,
          ),
          'author:roles' => array(
            'name' => 'Author » User roles',
            'type' => 'list<integer>',
            'boost' => '1.0',
            'indexed' => 1,
          ),
          'body:value' => array(
            'name' => 'Body » Text',
            'type' => 'text',
            'boost' => '1.0',
            'indexed' => 1,
          ),
          'body:format' => array(
            'name' => 'Body » Text format',
            'type' => 'integer',
            'boost' => '1.0',
            'indexed' => 0,
          ),
        ),
      ),
    ),
  );
  search_api_index_insert($values);
  drupal_set_message('The Search API module was installed. A new default node index was created.');
}

/**
 * Implements hook_enable().
 */
function search_api_enable() {
  // Mark all old items as "dirty", since we can't know whether they are.
  db_update('search_api_item')
    ->fields(array('changed' => REQUEST_TIME))
    ->condition('changed', 0)
    ->execute();
  // Add all new items.
  // @todo
}

/**
 * Implements hook_uninstall().
 */
function search_api_uninstall() {
  variable_del('search_api_tasks');
}

/**
 * Implements hook_update_N().
 *
 * Update function that adds the machine names for servers and indexes.
 */
function search_api_update_7101() {
  $tx = db_transaction();
  try {
    // Servers
    $spec = array(
      'description' => 'The machine name for a server.',
      'type' => 'varchar',
      'length' => 50,
      'not null' => TRUE,
      'default' => '',
    );
    db_add_field('search_api_server', 'machine_name', $spec);

    $names = array();
    $servers = db_select('search_api_server', 's')
      ->fields('s')
      ->execute();
    foreach ($servers as $server) {
      $base = $name = drupal_strtolower(preg_replace('/[^a-z0-9]+/i', '_', $server->name));
      $i = 0;
      while (isset($names[$name])) {
        $name = $base . '_' . ++$i;
      }
      $names[$name] = TRUE;
      db_update('search_api_server')
        ->fields(array('machine_name' => $name))
        ->condition('id', $server->id)
        ->execute();
    }

    db_add_unique_key('search_api_server', 'machine_name', array('machine_name'));

    //Indexes
    $spec = array(
      'description' => 'The machine name of the index.',
      'type' => 'varchar',
      'length' => 50,
      'not null' => TRUE,
      'default' => '',
    );
    db_add_field('search_api_index', 'machine_name', $spec);

    $names = array();
    $indexes = db_select('search_api_index', 'i')
      ->fields('i')
      ->execute();
    foreach ($indexes as $index) {
      $base = $name = drupal_strtolower(preg_replace('/[^a-z0-9]+/i', '_', $index->name));
      $i = 0;
      while (isset($names[$name])) {
        $name = $base . '_' . ++$i;
      }
      $names[$name] = TRUE;
      db_update('search_api_index')
        ->fields(array('machine_name' => $name))
        ->condition('id', $index->id)
        ->execute();
    }

    db_add_unique_key('search_api_index', 'machine_name', array('machine_name'));
  }
  catch (Exception $e) {
    $tx->rollback();
    try {
      db_drop_field('search_api_server', 'machine_name');
      db_drop_field('search_api_index', 'machine_name');
    }
    catch (Exception $e1) {
      // Ignore.
    }
    throw new DrupalUpdateException(t('An exception occurred during the update: !msg.', array('!msg' => $e->getMessage())));
  }
}
